
Describe Securiy Administration and tasks
    - 
Describe the Process of signing an image 
    - To sign a docker image, you neeed a delegation key paid.
        -> These can be generated locally using $ docker trust key generate
        -> Or they can be done by a certificate authority 
        -> If you are importing a key $ docker trust key load
    1) Add the private key to the local Docker trust repositoy 
    2) Add the delegation public key to the notary server 
    3) Use the delegation private key to sign a particular tag and push it up to the repository 

Describe default engine security 
    - Docker Security 
        * 4 Major Areas * 
        1) Kenel namespaces
            - Docker containers are very similar to LXC conainers and they have similar security features 
            - by $ docker run, docker crates a set of namespaces and control groups for the contanier 
            - Namespaces provide the first and most straightforward form of siolation: processes running withing a container
                cannot see, and even less affect processes in another containerm or in the host system 
            - Each container gets it own network stack, meaning that a conainer doesn't get access to the ockets or interfaces of 
                another container. Of course if the host is setup properly, conatiners can interact wiht each toher through their 
                respective next work inteerfaces, just liek they can interact wiht external hosts. 
            - When you specify public ports for your containersor use links then IP traffic is allowed between containers 
            - From a network architecture point of view all conatiners on a given docker ost are sitting on bridge interfaces 
            - This means that they are just like physical machines connected through a common ethernet swtich 
        2) Control Groups 
            - Another key component of Linux Containersm they implement accounting and limiting 
            - They provide many useful metrics, but also they help ensure that each container gets its fair share of memory, CPUm disk IO
                and that a single container cannot being down those resources 
        3) Docker Daemon Attack Surface
            - Daemon requires root priviliges 
            - Only trusted users should be allowed to control your docker daemon 
                -> Docker allows you to share a direcotry between conainers and the host 
                -> Does this without limiting the rights access of tha container 
                -> This means that you can start a container where the /host irecto is, meaning the coantnie
                    can alter your file system without any restrction, similar to how virtualisatino allow filesystem resource sharing 
            - This has a strong security implication
            - For this reason, the REST API now uses a UNIX socket intead of a TCP socket bound on localhost 
                -> You can then use tradtional UNIX permission checks to limit the access to the control socket 
            - It is mandatory to secure API endpoints with HTTPS and certificates 
            - The daemon is potentially vulnerable to other inputs such as image loading from either dick with docker load 
            or from the network step docker pull 
            - If you run Docker on a server, it is recommended to run exclusively ocker on the server, and mose all other serevices within
                containers controlled bu Docker. 
        4) Linux Kernel Capabilities 
            - Docker starts containers with a restructed set of capabilities 
            - Capabilities turn the binary dichotomy into a fine grained acccess control system
            - Processes that just need to bind on a port below 1024 do not need to run as root, they can just be grated the net_bind_service capability instead 
            - There are many other capabilities, for almost all the specific areas where root privileges are usualy needed
            - Typical servers run several proecsses as root, insludding ssh, cron, logging, network configs 
                -> Conainers are ffierence because almost all of those tasks are handled by the infrastructure around the container
                -> This means that in most cases, conatiners do not need real root privileges at all , and therefore only need a 
                    reduced capability set 
                -> This means that root within a container has much less privileges than the real root 
                -> This is good, ebcause ifan intruder manages to elevate to root inside a container, they haven't esclated to host 
    
        Docker Content Trust Signiture Verification
            - The Docker engine can be configured to only run signed images
            - The signiture verification feautre is build directly into the dokerd binary 
            - This is configured in the daemon.json, whereby only repositories with user-specified root key can be pulled and run
            - 

        
    Describe Swarm Default Security
        - Uses public key infrastructure 
        - Built into docker, makes i sinmple to securely deploy a container orcehestration system. 
        - THe nodes in a swarm use multual Transport Layer security to authenticate, authorise, encryp the communications with other nodes in the swarm 
        - When you crate a swarm by running docker swarm init, docker designaes itself as a manager node 
        - By default, the manager nod generates a new root certificate anutorigty alson with a key pair, which 
            ((come back to this section))

    Describe MTLS 
        - 

    Describe Idenity Roles
        - 
    
    Compare and Contrast UCP Works and managers 
        - UCP agent service automatically starts serving all UCP components in manager node and only proxy service in worker node 
    
    Describe process to use external certificates with UCP and DTR
        - UCP Use your own TLS Certificates 
            - All UCP services are exposed using HTTPS to ensure all communicaes between clients and ICP are encrypted
            - By default this is done using selsigned TLS certificatese that are not trusted by client tools like web browsers 
            - To configure UCP to use your own TLS certificates and keys: 
                1) loginx 
                2) click certifficaes 
                3) Upload certificaes and keys 
                4) Click save 
            - Afer replacing the TLS certificates, your users will not be able to authenticate with their old client certificate bunles

    Describe and demonstarate that an image passes a security scan
        - Docker required a third party to scan, called Snyk 
        - The $ docker scan $ command allows yo to scan existing Docker images using the image name or ID 
            $ docker scan hello-world 
        - You can get a more detailed scan report about a Docker image by providing the Dockerfile used to create the image:
            $ docker scan --file Dockerfile docker-scan:e2e
            -> You can exclude scanning the base image in this by doing --exclude-base tag 
            --> Pass the --json flag to the command to get the output as json 
            -> --group-issues can be used to dispaly each issue just once
            --> --dependency-tree is used to show the dependency tree 
            -> --severity=low/medium/high to show the diff severities 
    
    Demonstrate and Describe how to enable Docker Content Trust 
        - Enable and disable conent trust per-shell or per-invocation 
        - In a shall uyou can enable content trust by setting the DOCKER_CONTENT_TRUST environment variable
        - Enableing per-shell is useful because you can have one shell configured for trusted operations and another terminal shell for 
            untrusted operations
        - You can also add this declaration to your shell profile to have it turned on always by default 
        - export DOCKER_CONTENT_TRUST = 1
    
    Describe and demonstrate how to confiduge RBAC and UCP 
        - UCP is now MKE (Mirantis Kuberneets Engine)
        * Creating Roles
            -> You can create kubernetes roles with throught the CLI using kubeclt or through the MKE web interface 
            -> Thorught the UI 
                1) Select Access Control
                2) From the left nav menu, select Roles 
                3) Selected Kubernetes tab at the top of the window 
                4) Select Create to craete a kubernetes role object 
                5) Seelect a namespace from the Naespace dropdown list. Selectig a specific namespace creates a role for use in 
                    that namespace, but selecting all namespaces creates a clusterrole where you can create riles for a cluster scoped kubernetes resource
                6) Provide the YAML for the role, either by entering it in the Object Yaml edirotr, or uploading
                7) Then create for role creation 
        * Creating Role Grants
            - Two types of role grants 
                1) CluterRoleBinding which applies to all namespaces 
                2) RoleBinding which applies to a specific namespace 
    
    Integrate with LDAP Directory 
        - Docker integrates wit LDAP so that you can manage users and groups from your organisations directory 
        - I will automatically propagate that ingormation to UCP and DTR 
        - If you enable LDAP, UCP uses a remote direcotry server to creates users automatically, and all logins are forwarded to the direcotyr server 
        - When you switch from build in auth to LDAP auth, all manually created users whose names don't match any LDAP search results are still avaialble 
        - 

    Demonstrate Creation of Client Bundles 
        - A clinet bundle is a group of certificates downloadable directly from the Docker Universal Control Plane user interface 
            within the admin section for "My Profile". This allows you to authorise a remote Docker engine to a specifc user account managed in Docker
            EE, absorbing all associated RBAC controls in the process. You can now execute docker swarm commands from 